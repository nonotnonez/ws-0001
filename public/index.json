[
{
	"uri": "http://localhost:1313/ws-0001/",
	"title": " IaC with Terraform and AWS ",
	"tags": [],
	"description": "",
	"content": "Infrastructure As Code with Terraform and AWS Overview HashiCorp Terraform is an infrastructure as code tool that lets you define both cloud and on-prem resources in human-readable configuration files that you can version, reuse, and share.\nYou can then use a consistent workflow to provision and manage all of your infrastructure throughout its lifecycle.\nTerraform can manage low-level components like compute, storage, and networking resources, as well as high-level components like DNS entries and SaaS features.\nIn this workshop we will use Terraform with AWS to create VPC, Subnet, EC2 , Route table, Internet gateway, Security group\nContent Introduction Prepairation Terraform Configure Resource Cleanup "
},
{
	"uri": "http://localhost:1313/ws-0001/2-prepair/2.1-aws/",
	"title": "AWS",
	"tags": [],
	"description": "",
	"content": "Setting up AWS for Terraform Account CLI \u0026amp; Secret Key Create IAM user = tf-cli Permision = AdministratorAccess Download and store Secret \u0026amp; Access Key AWS Console step by step "
},
{
	"uri": "http://localhost:1313/ws-0001/1-intro/",
	"title": "Introduction",
	"tags": [],
	"description": "",
	"content": "Infrastructure As Code with Terraform and AWS Overview HashiCorp Terraform is an infrastructure as code tool that lets you define both cloud and on-prem resources in human-readable configuration files that you can version, reuse, and share.\nYou can then use a consistent workflow to provision and manage all of your infrastructure throughout its lifecycle.\nTerraform can manage low-level components like compute, storage, and networking resources, as well as high-level components like DNS entries and SaaS features.\nIn this workshop we will use Terraform with AWS to create VPC, Subnet, EC2 , Route table, Internet gateway, Security group\nContent Introduction Prepairation Terraform Configure Resource Cleanup "
},
{
	"uri": "http://localhost:1313/ws-0001/3-tfconfig/3.1-vpcsubnet/",
	"title": "VPC &amp; Subnet",
	"tags": [],
	"description": "",
	"content": "Run Terraform Check version: docker-compose run \u0026ndash;rm terraform version Terraform init Command: docker-compose run \u0026ndash;rm terraform init Terraform plan Command: docker-compose run \u0026ndash;rm terraform plan Input AWS Access and Secret key Terraform apply Command: docker-compose run \u0026ndash;rm terraform apply Input AWS Access and Secret key AWS Console Checking VPC \u0026amp; Subnet: "
},
{
	"uri": "http://localhost:1313/ws-0001/2-prepair/2.2-dockercompose/",
	"title": "Docker Compose",
	"tags": [],
	"description": "",
	"content": "Install \u0026amp; Run Docker Compose: Build Docker Compose for Terraform: docker-compose.yml Run Docker Compose:\nCheck Docker Images: "
},
{
	"uri": "http://localhost:1313/ws-0001/3-tfconfig/3.2-ec2/",
	"title": "EC2",
	"tags": [],
	"description": "",
	"content": "Create EFS for file systems File systems settings: Services: EFS Choose Create file systems Name: WebServers-EFS-1 Uncheck Enable automatic backups (for reduce cost) Transition into infrequent Access (IA): choose None Transition into Archive: choose None Throught mode: Bursting Network access VPC: WebServers Mount targets: Remove all default Security groups Configure for Availability zone: ap-southeast-1a access to Security group: WebServers-EFS-1-SG Click Create Checking and copy config EFS via DNS Select WebServers-EFS-1 VPC Choose Attach Choose COPY Using the EFS mount helper: sudo mount -t efs -o tls fs-0469e4e20cb346954:/ efs "
},
{
	"uri": "http://localhost:1313/ws-0001/2-prepair/",
	"title": "Prepairation",
	"tags": [],
	"description": "",
	"content": "Diagram for Amazon EFS Lab In this lab, we will be constructing a model based on the following diagram:\nContents AWS Docker Compose Terraform Git Hub "
},
{
	"uri": "http://localhost:1313/ws-0001/3-tfconfig/3.3-launchinstancesandconfigureefs/",
	"title": "Launch Instances and Configure EFS",
	"tags": [],
	"description": "",
	"content": "Configuration Instances configure and Mount EFS file systems:\nSelect WebServer1\nConnect to Instances\nIn CMD interface run command:\nsudo -i sudo yum install -y amazon-efs-utils mkdir data ls sudo mount -t efs -o tls fs-0469e4e20cb346954:/ data cd data sudo bash -c \u0026ldquo;cat \u0026raquo; efs-1-setup.log\u0026rdquo; efs-1 mounted in site A cat efs-1-setup.log "
},
{
	"uri": "http://localhost:1313/ws-0001/2-prepair/2.3-terraform/",
	"title": "Terraform",
	"tags": [],
	"description": "",
	"content": "Terraform code to Deployment AWS Review Terraform file : main.tf : Resource blocks describe infrastructure objects like VPCs, subnets, route tables, and gateways provider.tf: Enables Terrafrom to interact with cloud providers and other APIs versions.tf: Sets version constaints for Terraform and optionally maps provides to a source address and version constaint terraform.tfvars: To set lots of variables, it is more convenient to specify their values in a variable definitions file variables.tf Input variables define reusable values and work like function arguments in general-purpose programming languages "
},
{
	"uri": "http://localhost:1313/ws-0001/3-tfconfig/",
	"title": "Terraform Configure",
	"tags": [],
	"description": "",
	"content": "Create Subnet \u0026amp; VPC Using Amazon EFS, you can grow and shink your file systems automatically as you add and remove files, removing the need to provision and manage capacity to accommodate growth.\nContent Create VPC \u0026amp; Subnet Create EC2 Launch Instances and Configure EFS Share files between two EC2 Instance "
},
{
	"uri": "http://localhost:1313/ws-0001/2-prepair/2.4-github/",
	"title": "Github",
	"tags": [],
	"description": "",
	"content": "Version control with Github Create Github Access Key : https://github.com/settings/tokens\nName: github_token_ws Expiration:\t90 days Select scopes: repo workflow Clone Source form Github: git clone https://**token**@github.com/NoNotNonez/ws-0001.git\nCopy Source code to Github Repo:\ncd /ws-0001/terraform Create .gitignore:\nto security and prevent important file upload to github Push Source code to Git Repo:\ngit status git add . git commit -m \u0026ldquo;Add Tf source\u0026rdquo; git push "
},
{
	"uri": "http://localhost:1313/ws-0001/4-cleanup/",
	"title": "Resource Cleanup",
	"tags": [],
	"description": "",
	"content": "Clean up resources We will proceed to delete the resources in the following order:\nDelete Instances Access the Amazon EC2 Select WebServers1 and WebServers2 Select Terminate Delete Security Groups Access to Security Groups Select WebServers-EFS-1-SG Select delete Delete file system Access the Amazon EFS Select WebServers-EFS-1-SG. Select delete Confirm. "
},
{
	"uri": "http://localhost:1313/ws-0001/3-tfconfig/3.4-sharefilesbetweentwoec2instances/",
	"title": "Share files between two EC2 Instance",
	"tags": [],
	"description": "",
	"content": "Setting EFS in diffirent Instane In the EFS interface:\nSelect WebServers-EFS-1-SG Click Network tab Click Manage Add mount target: Configure for Availability zone: ap-southeast-1b access to Security group: WebServers-EFS-1-SG Checking EFS config:\nInstances configure and Mount EFS file systems:\nSelect WebServer2 Connect to Instances\nIn CMD interface run command:\nsudo -i sudo yum install -y amazon-efs-utils mkdir data ls sudo mount -t efs -o tls fs-0469e4e20cb346954:/ data cd data sudo bash -c \u0026ldquo;cat \u0026raquo; efs-1-setup.log\u0026rdquo; efs-1 mounted in site B cat efs-1-setup.log We will see data in different Instances "
},
{
	"uri": "http://localhost:1313/ws-0001/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "http://localhost:1313/ws-0001/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
}]