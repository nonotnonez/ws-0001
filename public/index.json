[
{
	"uri": "http://localhost:1313/ws-0001/",
	"title": " IaC with Terraform and AWS ",
	"tags": [],
	"description": "",
	"content": "Infrastructure As Code with Terraform and AWS Overview Project In this workshop we will use Terraform interact with AWS to create VPC, Subnet, EC2 , Route table, Internet gateway, Security group \u0026hellip;\nOverview Terraform Infrastructure as Code (IaC) tools allow you to manage infrastructure with configuration files rather than through a graphical user interface. IaC allows you to build, change, and manage your infrastructure in a safe, consistent, and repeatable way by defining resource configurations that you can version, reuse, and share.\nTerraform plugins called providers let Terraform interact with cloud platforms and other services via their application programming interfaces (APIs). HashiCorp and the Terraform community have written over 1,000 providers to manage resources on Amazon Web Services (AWS), Azure, Google Cloud Platform (GCP)\u0026hellip;\nContent Introduction Prepairation Terraform Configure Resource Cleanup IaC Advanced "
},
{
	"uri": "http://localhost:1313/ws-0001/2-prepair/2.1-aws/",
	"title": "AWS",
	"tags": [],
	"description": "",
	"content": "Setting up AWS for Terraform Account CLI \u0026amp; Secret Key Create IAM user = tf-cli Permision = AdministratorAccess Download and store Secret \u0026amp; Access Key AWS Console process "
},
{
	"uri": "http://localhost:1313/ws-0001/5-iac/5.1-ec2/",
	"title": "EC2",
	"tags": [],
	"description": "",
	"content": "AWS Infratructure as code with EC2 1- Create Key Pairs AWS key-pair name: tf-keypair 2- Terraform configure Same configure files: visions.tf , provider.tf\nterraform.tfvars main.tf\nReview : Variables - VPC \u0026amp; Subnet Review : Route table - Internet gateway - Assciate subnet with Route table Review : Security Group Review : EC2 Instance provision 3 - Run Terraform docker-compose run \u0026ndash;rm terraform init docker-compose run \u0026ndash;rm terraform plan docker-compose run \u0026ndash;rm terraform apply 4 - AWS Console Check: Review : Instances Review : VPC Review : Subnet Review : Route table Review : Internet Gateway Review : Security Group 5 - Clean up: docker-compose run â€“rm terraform destroy "
},
{
	"uri": "http://localhost:1313/ws-0001/1-intro/",
	"title": "Introduction",
	"tags": [],
	"description": "",
	"content": "Infrastructure As Code with Terraform and AWS Preview process To deploy infrastructure with Terraform:\nScope - Identify the infrastructure for your project. Author - Write the configuration for your infrastructure. Initialize - Install the plugins Terraform needs to manage the infrastructure. Plan - Preview the changes Terraform will make to match your configuration. Apply - Make the planned changes. Content Introduction Prepairation Terraform Configure Resource Cleanup "
},
{
	"uri": "http://localhost:1313/ws-0001/3-tfconfig/3.1-vpcsubnet/",
	"title": "VPC &amp; Subnet",
	"tags": [],
	"description": "",
	"content": "Run Terraform Terraform init Command: docker-compose run \u0026ndash;rm terraform init Terraform plan Command: docker-compose run \u0026ndash;rm terraform plan Input AWS Access and Secret key Terraform apply Command: docker-compose run \u0026ndash;rm terraform apply Input AWS Access and Secret key AWS Console Checking VPC \u0026amp; Subnet: "
},
{
	"uri": "http://localhost:1313/ws-0001/5-iac/5.2-ansible/",
	"title": "Ansible",
	"tags": [],
	"description": "",
	"content": "Infratructure As Code We are processing \u0026hellip;..\n"
},
{
	"uri": "http://localhost:1313/ws-0001/2-prepair/2.2-dockercompose/",
	"title": "Docker Compose",
	"tags": [],
	"description": "",
	"content": "Install \u0026amp; Run Docker Compose: Build Docker Compose for Terraform: docker-compose.yml Run Docker Compose:\nCommand: docker-compose run \u0026ndash;rm terraform version Check Docker Images: Command: docker images "
},
{
	"uri": "http://localhost:1313/ws-0001/2-prepair/",
	"title": "Prepairation",
	"tags": [],
	"description": "",
	"content": "Diagram for Workshop In this lab, we will be constructing a model based on the following diagram:\nContents AWS Docker Compose Terraform Git Hub "
},
{
	"uri": "http://localhost:1313/ws-0001/2-prepair/2.3-terraform/",
	"title": "Terraform",
	"tags": [],
	"description": "",
	"content": "Terraform code to deployment AWS Review Terraform configure files : main.tf : Resource blocks describe infrastructure objects like VPCs, subnets, route tables, and gateways provider.tf: Enables Terrafrom to interact with cloud providers and other APIs versions.tf: Sets version constaints for Terraform and optionally maps provides to a source address and version constaint terraform.tfvars: To set lots of variables, it is more convenient to specify their values in a variable definitions file variables.tf Input variables define reusable values and work like function arguments in general-purpose programming languages "
},
{
	"uri": "http://localhost:1313/ws-0001/3-tfconfig/",
	"title": "Terraform Configure",
	"tags": [],
	"description": "",
	"content": " Using Terraform to create VPC and Subnet via code Content Create VPC \u0026amp; Subnet "
},
{
	"uri": "http://localhost:1313/ws-0001/2-prepair/2.4-github/",
	"title": "Github",
	"tags": [],
	"description": "",
	"content": "Version control with Github Create Github Access Key : https://github.com/settings/tokens\nName: github_token_ws Expiration:\t90 days Select scopes: repo workflow Clone Source form Github: git clone https://**token**@github.com/NoNotNonez/ws-0001.git\nCopy Source code to Github Repo:\ncd /ws-0001/terraform Create .gitignore:\nto security and prevent important file upload to github Push Source code to Git Repo:\ngit status git add . git commit -m \u0026ldquo;Add Tf source\u0026rdquo; git push "
},
{
	"uri": "http://localhost:1313/ws-0001/4-cleanup/",
	"title": "Resource Cleanup",
	"tags": [],
	"description": "",
	"content": "Clean up resources We will proceed to delete the resources in the following order:\nTerrafrom destroy: Run command: docker-compose run \u0026ndash;rm terraform destroy Import Secret \u0026amp; Access Key Checking AWS Console: Local Check:\nRun command: docker system prune -a docker images "
},
{
	"uri": "http://localhost:1313/ws-0001/5-iac/",
	"title": "IaC Advanced",
	"tags": [],
	"description": "",
	"content": "Infratructure As Code We are processing \u0026hellip;..\nContent EC2 Ansible "
},
{
	"uri": "http://localhost:1313/ws-0001/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "http://localhost:1313/ws-0001/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
}]